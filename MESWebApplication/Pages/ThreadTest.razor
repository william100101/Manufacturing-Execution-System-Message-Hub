@page "/threadtest"

<h3>Thread Test</h3>
<button @onclick="@DoTasks">Test</button>
<br />
@if (model != null)
{
    <ul>
        @foreach (var item in model)
        {
            <li>@item</li>
        }
    </ul>
}


@code {
    List<string> model;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    //private async Task DoTasks()
    //{
    //    model = new List<string>();
    //    var tasks = new List<Task>();

    //    for (int i = 0; i < 20; i++)
    //    {
    //        await Task.Run(temp);            
    //    }
    //}

    //private async Task<string> temp()
    //{
    //    string value = await SingleTask();
    //    model.Add(value);
    //    StateHasChanged();
    //    return value;
    //}

    //private async Task DoTasks()
    //{
    //    model = new List<string>();
    //    var tasks = new List<Task>();

    //    for (int i = 0; i < 20; i++)
    //    {
    //        Task<string> t = SingleTask();
    //        t.Start(TaskScheduler.)
    //        model.Add(await t);
    //        StateHasChanged();
    //    }
    //}


    private async Task DoTasks()
    {
        model = new List<string>();
        var tasks = new List<Task>();

        for (int i = 0; i < 20; i++)
        {
            Task t = Task.Run(() => SingleTask());
            tasks.Add(t);
        }
        await Task.WhenAll(tasks.ToArray());
        foreach (Task<string> task in tasks)
        {
            model.Add(task.Result);
        }
    }

    private async Task<string> SingleTask()
    {
        await Task.Delay(3000);
        return DateTime.Now.ToString();
    }

}
