// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace MessageHub.MeltModels
{
    public partial class MeltContext : DbContext
    {
        public MeltContext()
        {
        }

        public MeltContext(DbContextOptions<MeltContext> options)
            : base(options)
        {
            this.Database.SetCommandTimeout(TimeSpan.FromSeconds(60 * 30));
        }

        public virtual DbSet<FromBiz> FromBizs { get; set; }
        public virtual DbSet<MessageState> MessageStates { get; set; }
        public virtual DbSet<ToBiz> ToBizs { get; set; }
        public virtual DbSet<VMsgHubMessageTypesFromBiz> VMsgHubMessageTypesFromBizs { get; set; }
        public virtual DbSet<VMsgHubMessageTypesToBiz> VMsgHubMessageTypesToBizs { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<FromBiz>(entity =>
            {
                entity.ToTable("FromBiz");

                entity.HasIndex(e => new { e.L4transactionId, e.MessageName }, "IX_FromBiz_L4TransID_MessageName")
                    .HasFillFactor(80);

                entity.HasIndex(e => new { e.MessageStateId, e.SourceId }, "IX_FromBiz_MessStateIDSourceID_QueuedTimeInc")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.ProcessedTime, "IX_FromBiz_Purge")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.QueuedTime, "IX_FromBiz_QueuedTimeASC")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.MessageName, "UX_messageName");

                entity.Property(e => e.FromBizId).HasColumnName("FromBizID");

                entity.Property(e => e.ErrorDescription)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.HeatNumber)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ingot)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.L4transactionId)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("L4TransactionID");

                entity.Property(e => e.Lot)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.MessageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageStateId).HasColumnName("MessageStateID");

                entity.Property(e => e.OrderItem)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessedTime).HasColumnType("datetime");

                entity.Property(e => e.QueuedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ResubmittedByUserId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("ResubmittedByUserID");

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.HasOne(d => d.MessageState)
                    .WithMany(p => p.FromBizs)
                    .HasForeignKey(d => d.MessageStateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FromBiz_MessageState");
            });

            modelBuilder.Entity<MessageState>(entity =>
            {
                entity.ToTable("MessageState");

                entity.Property(e => e.MessageStateId).HasColumnName("MessageStateID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ToBiz>(entity =>
            {
                entity.ToTable("ToBiz");

                entity.HasIndex(e => new { e.DestinationId, e.MessageName }, "IX_ToBiz_1")
                    .HasFillFactor(80);

                entity.HasIndex(e => new { e.MessageStateId, e.Expired }, "IX_ToBiz_MessageStateID_Expired")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.ProcessedTime, "IX_ToBiz_Purge")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.QueuedTime, "IX_ToBiz_QueuedTime");

                entity.HasIndex(e => e.MessageName, "NonClusteredIndex-20240722-092537");

                entity.HasIndex(e => e.L4transactionId, "UX_L4TransactionID_inc_QueuedTime_ProcessedTime");

                entity.HasIndex(e => e.MessageName, "UX_MessageName_inc_ToBizID_L4TransactionID");

                entity.HasIndex(e => new { e.Expired, e.MessageStateId }, "_dta_index_ToBiz_26_1607116916__K10_K5_1_2_6_8")
                    .HasFillFactor(80);

                entity.Property(e => e.ToBizId).HasColumnName("ToBizID");

                entity.Property(e => e.DestinationId).HasColumnName("DestinationID");

                entity.Property(e => e.Expired).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeatNumber)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Ingot)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.L4transactionId)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("L4TransactionID");

                entity.Property(e => e.Lot)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.MessageAckReceived).HasDefaultValueSql("((0))");

                entity.Property(e => e.MessageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageStateId).HasColumnName("MessageStateID");

                entity.Property(e => e.MessageStatusReceived).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderAckReceived).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderInqAckReceived).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderItem)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessedTime).HasColumnType("datetime");

                entity.Property(e => e.QueuedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ResubmittedByUserId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ResultsReceived).HasDefaultValueSql("((0))");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.HasOne(d => d.MessageState)
                    .WithMany(p => p.ToBizs)
                    .HasForeignKey(d => d.MessageStateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToBiz_MessageState");
            });

            modelBuilder.Entity<VMsgHubMessageTypesFromBiz>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMsgHubMessageTypes_FromBiz");

                entity.Property(e => e.MessageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("messageName");
            });

            modelBuilder.Entity<VMsgHubMessageTypesToBiz>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMsgHubMessageTypes_ToBiz");

                entity.Property(e => e.MessageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("messageName");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}